upstream <%= upstream_name %> {
  # fail_timeout=0 means we always retry the unicorn master, since it's
  # responsible for restarting workers when they fail.
  server unix:<%= unicorn_socket %> fail_timeout=0;
}

# Canonical www. redirect
server {
  listen <%= listen_host %>:<%= listen_port %>;
  server_name www.<%= domain %>;
  return 301 http://<%= domain %>$request_uri;
}

server {
  charset utf-8;

  listen <%= listen_host %>:<%= listen_port %>;
  listen <%= listen_host %>:443 ssl;
  server_name <%= domain %>;

  ssl_certificate      certs/<%= domain %>.crt;
  ssl_certificate_key  certs/<%= domain %>.key;
  ssl_session_timeout  5m;
  ssl_ciphers          HIGH:!aNULL:!MD5:!kEDH;

  root <%= path / 'public' %>;

  # POSTs are intended for the app, not cached pages. We use '=' to let @app set the response code.
  error_page 405 = @app;

  # Respond with the maintenance page whenever the status is 503.
  error_page 503 /system/maintenance.html;

  # Serve cached pages if they exist; otherwise, punt the request to the app.
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # If the maintenance page exists, then respond with HTTP 503 (which will
    # serve the maintenace page; see error_page above).
    if (-f $document_root/system/maintenance.html) {
      return 503;
    }

    proxy_pass           http://<%= upstream_name %>;
    proxy_redirect       off;

    proxy_buffer_size    64k;
    proxy_buffers        32 16k;
    client_max_body_size 128m;

    proxy_set_header     Host              $host;
    proxy_set_header     X-Real-IP         $remote_addr;
    proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header     X-Forwarded-Proto $scheme;
  }
}
